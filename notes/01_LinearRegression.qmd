---
title: "**Linear Regression and Optimization**"
format:
  html:
    toc: true
    math: true
---

## The Supervised Learning Problem

We will begin our study of deep learning in the supervised setting.
In this setting, we are given labelled data with input features and an outcome.
Formally, we will have $n$ labelled observations $(x^{(1)}, y^{(1)}), \ldots, (x^{(n)}, y^{(n)})$.
In general, we will have $y \in \mathbb{R}$.
For simplicity, we will assume for now that $x \in \mathbb{R}$.

Our goal is to process the data and learn a function that approximates the outcomes.
In mathematical notation, we want to learn a function $f: \mathbb{R} \to \mathbb{R}$ so that $f(x^{(i)}) \approx y^{(i)}$ for the $n$ labelled observations $i \in \{1,\ldots,n\}$.

Input and output

Strategy: Empirical risk minimization

Before we dive into the specific way we will accomplish this with linear regression, let's discuss the general deep learning framework.
This three-step framework gives a flexible scaffolding that we will use to understand almost every topic in this course.

The three-step framework includes:

• **The Model Class:** The function that we'll use to process the input and produce a corresponding output.

• **The Loss:** The function that measures the quality of the outputs from our model. (Without loss of generality, we will assume that lower is better.)

• **The Optimizer:** The method of updating the model to improve the loss.

With these general concepts in mind, we'll explore linear regression.

## Univariate Linear Regression

Linear regression is a simple and powerful tool that we will use to understand the basics of deep learning.

### Linear Model

As its name suggests, linear regression uses a linear model to process the input into an approximation of the output.
Let $w \in \mathbb{R}$ be a weight parameter.
The linear model (for one-dimensional inputs) is given by $f(x) = wx$.

Unlike many deep learning models, we can visualize the linear model since it is given by a line.
In the plot, we have the $n=10$ data points plotted in 2 dimensions.
There is one linear model $f(x) = 2x$ that closely approximates the data and another linear model $f(x)=\frac12 x$ that does not approximate the data.

<center><img src="images/regression_1d.pdf" width="700"></center>

Our goal is to learn how to find a linear model that fits the data well. Before we can do this though, we will need to define what it means for a model to "fit the data well".

### Mean Squared Error Loss

Our goal for the loss function is to measure how closely the data fits the prediction made by our model.
Intuitively, we should take the difference between the prediction and the true outcome $f(x^{(i)})-y^{(i)}$.

The issue with this approach is that $f(x^{(i)})-y^{(i)}$ can be small (negative) even when $f(x^{(i)}) \neq y^{(i)}$.
A natural fix is to take the absolute value $|f(x^{(i)}) - y^{(i)}|$.
The benefit of the absolute value is that the loss is $0$ if and only if $f(x^{(i)}) = y^{(i)}$.
However, the absolute value function is not differentiable, which is a property we'll need for optimization.
Instead, we use the squared loss:

$\mathcal{L}(w) = \frac1{n} \sum_{i=1}^n (f(x^{(i)}) - y^{(i)})^2$

Here, we use the mean squared error loss, which is the average squared difference between the prediction and the true output over the dataset.
Unlike the absolute value function, the squared function is differentiable everywhere.
In addition, the squared error penalizes predictions that are far from the true output even more.

<center><img src="images/regression_losses.pdf" width="700"></center>

The plot above compares the squared function to the absolute value function.
While both are $0$ if and only if their input is $0$, the squared function is differentiable everywhere and penalizes large errors more.

### Exact Optimization

We now have our model and loss function: the linear model and mean squared error loss.
The question becomes how to update the weights of the model to minimize the loss.
In particular, we want to find $w$ that minimizes $\mathcal{L}(w)$.
While the language we're using is new, the problem is not.
We've actually been studying how to do this since pre-calculus!

The squared loss is convex (a bowl facing up versus the downward facing *cave* of con*cave*); see the plot above for a 'proof' by example.
In this case, we know there is only one minimum.
Not only that but we can find the minimum by setting the derivative to $0$!

As such, our game plan is to set $\frac{\partial \mathcal{L}}{\partial w}$ to $0$ and solve for $w$.
Recall that $f(x) = wx$.
We will use the linearity of the derivative, the chain rule, and the power rule to compute the derivative of $\mathcal{L}$ with respect to $w$:

$$
\frac{\partial}{\partial w}[\mathcal{L}(w)]
= \frac1{n} \sum_{i=1}^n \frac{\partial}{\partial w} [(f(x^{(i)}) - y^{(i)})^2]
= \frac1{n} \sum_{i=1}^n 2(f(x^{(i)}) - y^{(i)}) \frac{\partial}{\partial w} [(f(x^{(i)}) - y^{(i)})]
= \frac1{n} \sum_{i=1}^n 2(w x^{(i)} - y^{(i)}) x^{(i)}.
$$

Setting the derivative to $0$ and solving for $w$,
we get $\frac2{n} \sum_{i=1}^n w (x^{(i)})^2 = \frac2{n} \sum_{i=1}^n y^{(i)} x^{(i)}$ and so
$$
w = \frac{\sum_{i=1}^n y^{(i)}}{\sum_{i=1}^n (x^{(i)})^2}.
$$

This is the exact solution to the univariate linear regression problem!
We can now use this formula to find the best linear model for our data.
But we're not done with linear regression yet. We assumed that the input was one-dimensional; however, we often have high-dimensional data.

## Multivariate Linear Regression

Consider the more general setting where the input is $d$-dimensional.
As before, we observe $n$ training observations $(\mathbf{x}^{(1)}, y^{(1)}), \ldots, (\mathbf{x}^{(n)}, y^{(n)})$ but now $\mathbf{x}^{(i)} \in \mathbb{R}^d$.
We will generalize the ideas from univariate linear regression to the multivariate setting.

### Linear Model

Instead of using a single weight $w \in \mathbb{R}$, we will use $d$ weights $\mathbf{w} \in \mathbb{R}^d$.
Then the model is given by $f(x) = \mathbf{w} \cdot \mathbf{x}$.

Instead of using a *line* to fit the data, we use a *hyperplane*.
While visualizing the model is difficult in high dimensions, we can still see the model when $d=2$.

<center><img src="images/regression_2d.pdf" width="600"></center>

In the plot above, we have $n=10$ data points in 3 dimensions.
There is one linear model $f(\mathbf{x}) = \begin{bmatrix} 2 \\ \frac12 \end{bmatrix} \cdot \mathbf{x}$ that closely approximates the data and another linear model $f(\mathbf{x}) = \begin{bmatrix} \frac12 \\ 0 \end{bmatrix} \cdot \mathbf{x}$ that does not approximate the data.

### Mean Squared Error

Since the output of $f$ is still a single real number, we do not have to change the loss function. However, we can use our linear algebra notation to write the mean squared error in an elegant way.

Let $\mathbf{X} \in \mathbb{R}^{n \times d}$ be the data matrix where the $i$th row is $(\mathbf{x}^{(i)})^\top$.
Similarly, let $\mathbf{y} \in \mathbf{R}^n$ be the target vector where the $i$th entry is $y^{(i)}$.
We can write the mean squared error loss as
$$
\mathcal{L}(\mathbf{w}) = \frac1{n} \| \mathbf{X w - y} \|_2^2.
$$

### Exact Optimization

Just like computing the derivative and setting it to $0$, we can compute the gradient and set it to the zero vector $\mathbf{0} \in \mathbb{R}^d$.
In mathematical notation, we will set $\nabla_\mathbf{w} \mathcal{L}(\mathbf{w}) = \mathbf{0}$ and solve for $\mathbf{w}$.

We will leave this as an exercise on the homework.
The final solution is that $\mathbf{w} = (\mathbf{X}^\top \mathbf{X})^{-1} \mathbf{X}^\top \mathbf{y}$.

This is the exact solution to the multivariate linear regression problem!

## Empirical Risk Minimization

## Looking Forward

Complexity of computing the exact solution

What happens when the data does not have a linear relationship? I.e., even the best linear model gives a poor approximation.
